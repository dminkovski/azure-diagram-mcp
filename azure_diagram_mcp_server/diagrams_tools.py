# Copyright (c) Microsoft Corporation. All rights reserved.
"""Diagram generation and example functions for the azure-diagram-mcp-server."""

import diagrams
import importlib
import inspect
import logging
import os
import re
import signal
import uuid
import datetime
from azure_diagram_mcp_server.models import (
    DiagramExampleResponse,
    DiagramGenerateResponse,
    DiagramIconsResponse,
    DiagramType,
)
from azure_diagram_mcp_server.scanner import scan_python_code
from typing import Optional
import platform
import tempfile
import subprocess

# Add Graphviz to PATH if on Windows (cross-platform compatible)
if platform.system() == "Windows":
    # Try common Graphviz installation paths on Windows
    possible_paths = [
        r"C:\Program Files\Graphviz\bin",
        r"C:\Program Files (x86)\Graphviz\bin",
        os.path.expanduser("~\\AppData\\Local\\Packages\\Graphviz*\\LocalCache\\Local\\bin"),
    ]
    for graphviz_path in possible_paths:
        if os.path.exists(graphviz_path) and graphviz_path not in os.environ.get("PATH", ""):
            os.environ["PATH"] += os.pathsep + graphviz_path
            break

logger = logging.getLogger(__name__)

def _save_diagram_files(output_path: str, code: str) -> Optional[str]:
    """Save the diagram code and README files."""
    try:
        # Get the directory and filename
        output_dir = os.path.dirname(output_path)
        filename_base = os.path.basename(output_path)
        
        # Save the diagram code
        code_file_path = os.path.join(output_dir, 'diagram_code.py')
        with open(code_file_path, 'w', encoding='utf-8') as f:
            f.write(f"""\"\"\"
Diagram generation code for {filename_base}
Generated by Azure Diagram MCP Server
\"\"\"

{code}
""")
        
        # Generate and save README
        return code_file_path
    except Exception as e:
        logger.error(f"Error saving diagram files: {e}")
        return None


async def generate_diagram(
    code: str,
    filename: Optional[str] = None,
    timeout: int = 90,
    workspace_dir: Optional[str] = None,
) -> DiagramGenerateResponse:
    """Generate a diagram from Python code using the `diagrams` package (Azure only)."""
    scan_result = await scan_python_code(code)
    if scan_result.has_errors:
        return DiagramGenerateResponse(
            status='error',
            message=f'Security issues found in the code: {scan_result.error_message}',
        )
    if filename is None:
        filename = f'diagram_{uuid.uuid4().hex[:8]}'
    if os.path.isabs(filename):
        output_path = os.path.normpath(filename)
    else:
        simple_filename = os.path.basename(filename)
        
        # Check if workspace_dir has already contains 'diagrams' string in it
        if workspace_dir and 'diagrams' in workspace_dir.lower():
            workspace_dir = workspace_dir  # Use as is
        elif workspace_dir and os.path.isdir(workspace_dir) and os.access(workspace_dir, os.W_OK):
            # Create diagrams folder instead of generated-diagrams
            output_dir = os.path.join(workspace_dir, 'diagrams')
        else:
            # Use cross-platform temporary directory
            temp_base = tempfile.gettempdir()
            output_dir = os.path.join(temp_base, 'diagrams')
        os.makedirs(output_dir, exist_ok=True)
        output_path = os.path.normpath(os.path.join(output_dir, simple_filename))
    try:
        namespace = {}
        exec('import os', namespace)
        exec('import diagrams', namespace)
        exec('from diagrams import Diagram, Cluster, Edge', namespace)
        # Only import Azure and generic/onprem icons
        exec('from diagrams.azure.identity import *\nfrom diagrams.azure.compute import *\nfrom diagrams.azure.network import *\nfrom diagrams.azure.storage import *\nfrom diagrams.azure.database import *\nfrom diagrams.azure.web import *\nfrom diagrams.azure.devops import *\nfrom diagrams.azure.general import *\nfrom diagrams.azure.security import *\nfrom diagrams.azure.identity import *\nfrom diagrams.azure.integration import *\nfrom diagrams.generic.compute import *\nfrom diagrams.generic.database import *\nfrom diagrams.generic.network import *\nfrom diagrams.generic.storage import *\nfrom diagrams.onprem.compute import *\nfrom diagrams.onprem.database import *\nfrom diagrams.onprem.network import *\nfrom diagrams.onprem.client import *', namespace)
        exec('from urllib.request import urlretrieve', namespace)
        if 'with Diagram(' in code:
            diagram_pattern = r'with\s+Diagram\s*\((.*?)\)'
            import re
            matches = re.findall(diagram_pattern, code)
            for match in matches:
                original_args = match.strip()
                has_show = 'show=' in original_args
                has_filename = 'filename=' in original_args
                new_args = original_args
                # Use forward slashes for cross-platform compatibility
                safe_path = output_path.replace('\\', '/')
                if has_filename:
                    filename_pattern = r'filename\s*=\s*[\'\"]([^\'\"]*)[\'\"]'
                    new_args = re.sub(filename_pattern, f"filename=r'{safe_path}'", new_args)
                else:
                    if new_args and not new_args.endswith(','):
                        new_args += ', '
                    new_args += f"filename=r'{safe_path}'"
                if not has_show:
                    if new_args and not new_args.endswith(','):
                        new_args += ', '
                    new_args += 'show=False'
                code = code.replace(f'with Diagram({original_args})', f'with Diagram({new_args})')
        # Cross-platform timeout handling
        def timeout_handler(signum, frame):
            raise TimeoutError(f'Diagram generation timed out after {timeout} seconds')
        
        # Set up timeout mechanism (Unix systems only for signal-based timeout)
        timeout_active = False
        if platform.system() != 'Windows':
            try:
                signal.signal(signal.SIGALRM, timeout_handler)
                signal.alarm(timeout)
                timeout_active = True
            except (AttributeError, OSError):
                # Fallback for systems without SIGALRM support
                pass
        
        # Execute the diagram code
        exec(code, namespace)
        
        # Cancel the alarm if it was set
        if timeout_active:
            signal.alarm(0)
        png_path = f'{output_path}.png'
        if os.path.exists(png_path):            
            # Save diagram code and README files
            code_file_path = _save_diagram_files(output_path, code)
            
            success_message = f'Diagram generated successfully at {png_path}'
            if code_file_path:
                success_message += f'\nAdditional files created:\n- {code_file_path}'
            
            return DiagramGenerateResponse(
                status='success',
                path=png_path,
                message=success_message,
            )
        else:
            return DiagramGenerateResponse(
                status='error',
                message='Diagram file was not created. Check your code for errors.',
            )
    except TimeoutError as e:
        return DiagramGenerateResponse(status='error', message=str(e))
    except Exception as e:
        error_type = type(e).__name__
        error_message = str(e)
        return DiagramGenerateResponse(
            status='error', message=f'Error generating diagram: {error_type}: {error_message}'
        )

def get_diagram_examples(diagram_type: DiagramType = DiagramType.ALL) -> DiagramExampleResponse:
    """Get example code for different types of diagrams (Azure only)."""
    examples = {}
    # Azure basic example
    if diagram_type in [DiagramType.AZURE, DiagramType.ALL]:
        examples['azure_basic'] = """from diagrams import Diagram
from diagrams.azure.compute import VM
from diagrams.azure.network import LoadBalancers, VirtualNetworks
from diagrams.azure.storage import StorageAccounts

with Diagram("Basic Azure Architecture", show=False):
    # Storage
    storage = StorageAccounts("Storage Account")
    
    # Network
    vnet = VirtualNetworks("Virtual Network")
    lb = LoadBalancers("Load Balancer")
    
    # Compute
    vm = VM("Virtual Machine")
    
    # Flow
    lb >> vm >> storage
    vnet - vm"""
        
        examples['azure_comprehensive'] = """from diagrams import Diagram, Cluster
from diagrams.azure.compute import VM
from diagrams.azure.network import LoadBalancers, ApplicationGateway
from diagrams.azure.storage import StorageAccounts
from diagrams.azure.database import SQLDatabases

with Diagram("Comprehensive Azure Architecture", show=False):
    # External components
    storage = StorageAccounts("Blob Storage")
    
    # Virtual Network as main container
    with Cluster("Virtual Network (10.0.0.0/16)"):
        
        # Public subnet
        with Cluster("Public Subnet (10.0.1.0/24)"):
            lb = LoadBalancers("Load Balancer")
            app_gw = ApplicationGateway("App Gateway")
        
        # Private subnet  
        with Cluster("Private Subnet (10.0.2.0/24)"):
            vm1 = VM("Web Server 1")
            vm2 = VM("Web Server 2")
        
        # Database subnet
        with Cluster("Database Subnet (10.0.3.0/24)"):
            db = SQLDatabases("SQL Database")
    
    # Traffic flow
    app_gw >> lb
    lb >> [vm1, vm2]
    vm1 >> db
    vm2 >> db
    vm1 >> storage
    vm2 >> storage"""
    if diagram_type in [DiagramType.SEQUENCE, DiagramType.ALL]:
        examples['sequence'] = """with Diagram(\"User Authentication Flow\", show=False):\n    user = User(\"User\")\n    login = InputOutput(\"Login Form\")\n    auth = Decision(\"Authenticated?\")\n    success = Action(\"Access Granted\")\n    failure = Action(\"Access Denied\")\n    user >> login >> auth\n    auth >> success\n    auth >> failure\n"""
    if diagram_type in [DiagramType.FLOW, DiagramType.ALL]:
        examples['flow'] = """with Diagram(\"Order Processing Flow\", show=False):\n    start = Predefined(\"Start\")\n    order = InputOutput(\"Order Received\")\n    check = Decision(\"In Stock?\")\n    process = Action(\"Process Order\")\n    wait = Delay(\"Backorder\")\n    ship = Action(\"Ship Order\")\n    end = Predefined(\"End\")\n    start >> order >> check\n    check >> process >> ship >> end\n    check >> wait >> process\n"""
    if diagram_type in [DiagramType.CLASS, DiagramType.ALL]:
        examples['class'] = """with Diagram(\"Simple Class Diagram\", show=False):\n    base = Python(\"BaseClass\")\n    child1 = Python(\"ChildClass1\")\n    child2 = Python(\"ChildClass2\")\n    base >> child1\n    base >> child2\n"""
    if diagram_type in [DiagramType.K8S, DiagramType.ALL]:
        examples['k8s_exposed_pod'] = """with Diagram(\"Exposed Pod with 3 Replicas\", show=False):\n    net = Ingress(\"domain.com\") >> Service(\"svc\")\n    net >> [Pod(\"pod1\"), Pod(\"pod2\"), Pod(\"pod3\")] << ReplicaSet(\"rs\") << Deployment(\"dp\") << HPA(\"hpa\")\n"""
        examples['k8s_stateful'] = """with Diagram(\"Stateful Architecture\", show=False):\n    with Cluster(\"Apps\"):\n        svc = Service(\"svc\")\n        sts = StatefulSet(\"sts\")\n        apps = []\n        for _ in range(3):\n            pod = Pod(\"pod\")\n            pvc = PVC(\"pvc\")\n            pod - sts - pvc\n            apps.append(svc >> pod >> pvc)\n    apps << PV(\"pv\") << StorageClass(\"sc\")\n"""
    if diagram_type in [DiagramType.ONPREM, DiagramType.ALL]:
        examples['onprem_web_service'] = """with Diagram(\"Advanced Web Service with On-Premises\", show=False):\n    ingress = Nginx(\"ingress\")\n    metrics = Prometheus(\"metric\")\n    metrics << Grafana(\"monitoring\")\n    with Cluster(\"Service Cluster\"):\n        grpcsvc = [Server(\"grpc1\"), Server(\"grpc2\"), Server(\"grpc3\")]\n    with Cluster(\"Sessions HA\"):\n        primary = Redis(\"session\")\n        primary - Redis(\"replica\") << metrics\n        grpcsvc >> primary\n    with Cluster(\"Database HA\"):\n        primary = PostgreSQL(\"users\")\n        primary - PostgreSQL(\"replica\") << metrics\n        grpcsvc >> primary\n    aggregator = Fluentd(\"logging\")\n    aggregator >> Kafka(\"stream\") >> Spark(\"analytics\")\n    ingress >> grpcsvc >> aggregator\n"""
    if diagram_type in [DiagramType.CUSTOM, DiagramType.ALL]:
        examples['custom_storage'] = """# Download an image to be used into a Custom Node class\nicon_url = \"https://raw.githubusercontent.com/mingrammer/diagrams/master/resources/azure/storage/storage-accounts.png\"\nicon_file = \"azure_storage.png\"\nurlretrieve(icon_url, icon_file)\nwith Diagram(\"Custom Azure Storage Node\", show=False):\n    storage = Custom(\"Azure Storage\", icon_file)\n"""
    return DiagramExampleResponse(examples=examples)

def list_diagram_icons(
    provider_filter: Optional[str] = None, service_filter: Optional[str] = None
) -> DiagramIconsResponse:
    """List available Azure icons from the diagrams package, with optional filtering."""
    logger.debug('Starting list_diagram_icons function')
    logger.debug(f'Filters - provider: {provider_filter}, service: {service_filter}')
    try:
        diagrams_path = os.path.dirname(diagrams.__file__)
        providers = {}
        exclude_dirs = ['__pycache__', '_template']
        # Only allow Azure, generic, and onprem providers
        allowed_providers = ['azure', 'generic', 'onprem']
        for provider_name in os.listdir(os.path.join(diagrams_path)):
            if provider_name not in allowed_providers:
                continue
            provider_path = os.path.join(diagrams_path, provider_name)
            if not os.path.isdir(provider_path) or provider_name in exclude_dirs:
                continue
            providers[provider_name] = {}
            for service_file in os.listdir(provider_path):
                if not service_file.endswith('.py') or service_file.startswith('_'):
                    continue
                service_name = service_file[:-3]
                module_path = f'diagrams.{provider_name}.{service_name}'
                try:
                    service_module = importlib.import_module(module_path)
                    icons = []
                    for name, obj in inspect.getmembers(service_module):
                        if name.startswith('_') or inspect.ismodule(obj):
                            continue
                        if inspect.isclass(obj) and hasattr(obj, '_icon'):
                            icons.append(name)
                    if icons:
                        providers[provider_name][service_name] = sorted(icons)
                except Exception:
                    continue
        return DiagramIconsResponse(providers=providers, filtered=False, filter_info=None)
    except Exception as e:
        logger.exception(f'Error in list_diagram_icons: {str(e)}')
        return DiagramIconsResponse(providers={}, filtered=False, filter_info={'error': str(e)})
